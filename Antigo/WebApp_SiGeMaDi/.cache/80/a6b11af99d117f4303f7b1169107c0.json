{"id":"../node_modules/a_mock/partialMock/expect.js","dependencies":[{"name":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\package.json","includedInParent":true,"mtime":1587896205932},{"name":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\.babelrc","includedInParent":true,"mtime":1587234046021},{"name":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\node_modules\\a_mock\\package.json","includedInParent":true,"mtime":1586887921136},{"name":"./newHasSameArgument","loc":{"line":2,"column":34},"parent":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\node_modules\\a_mock\\partialMock\\expect.js","resolved":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\node_modules\\a_mock\\partialMock\\newHasSameArgument.js"},{"name":"./expectCore","loc":{"line":3,"column":26},"parent":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\node_modules\\a_mock\\partialMock\\expect.js","resolved":"D:\\Francisco\\Documents\\Escola\\UNIVERSIDADE\\3_ANO\\6_Semestre\\Projeto e Seminário\\WebApp_SiGeMaDi\\node_modules\\a_mock\\partialMock\\expectCore.js"}],"generated":{"js":"function expect(index,mockContext) {\t\t\n\tvar newAreSameArgument = require('./newHasSameArgument');\n\tvar expectCore = require('./expectCore');\n\tvar arg = arguments[2];\n\tvar areSameArgument = newAreSameArgument(arg,index);\t\n\tvar nextExpect =  expectCore(areSameArgument,index,mockContext);\n\tfor (var i = 3; i < arguments.length; i++) {\n\t\tvar argument = arguments[i];\n\t\tnextExpect = nextExpect.expect(argument);\n\t};\n\treturn nextExpect;\n}\n\nmodule.exports = expect;","map":{"mappings":[{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/a_mock/partialMock/expect.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}}],"sources":{"../node_modules/a_mock/partialMock/expect.js":"function expect(index,mockContext) {\t\t\n\tvar newAreSameArgument = require('./newHasSameArgument');\n\tvar expectCore = require('./expectCore');\n\tvar arg = arguments[2];\n\tvar areSameArgument = newAreSameArgument(arg,index);\t\n\tvar nextExpect =  expectCore(areSameArgument,index,mockContext);\n\tfor (var i = 3; i < arguments.length; i++) {\n\t\tvar argument = arguments[i];\n\t\tnextExpect = nextExpect.expect(argument);\n\t};\n\treturn nextExpect;\n}\n\nmodule.exports = expect;"},"lineCount":14}},"hash":"5cea70c90ffda58b663d6bc7f99e3d71","cacheData":{"env":{}}}